
DocViewer
Page
of 4
Pages
/*************************************************************************
*****
*  DAT038, TDA417  Datastrukturer och algoritmer, LP2 2019
*  Lab 4: Path finder
*************************************************************************
*****/
Name of lab group: [...]
Group member A:    Rasmus Rosengren
Group member B:    Dino pasalic
/*************************************************************************
*****
*  How many hours did you spend on the assignment?
*************************************************************************
****/
Group member A:    [...]
Group member B:    [...]
/*************************************************************************
*****
*  List the minimal cost, shortest path, and nr of visited nodes,
*  for each of the following invocations.
*************************************************************************
****/
$ java RunPathFinder dijkstra AdjacencyGraph 
graphs/AdjacencyGraph/citygraph-EU.txt "Volos, Greece" "Oulu, Finland"
visited nodes: [961]
minimal cost:  [3488.0]
shortest path: [Volos, Greece -> Timişoara, Romania -> Arad, Romania -> Oradea, Romania -> Debrecen, Hungary -> Nyíregyháza, Hungary -> Uzhgorod, Ukraine -> Rzeszów, Poland -> Lublin, Poland -> Białystok, Poland -> Tallinn, Estonia -> Helsinki, Finland -> Oulu, Finland]

$ java RunPathFinder astar AdjacencyGraph graphs/AdjacencyGraph/citygraph-
EU.txt "Volos, Greece" "Oulu, Finland"
visited nodes: [961]
minimal cost:  [3488.0]
shortest path: [Volos, Greece -> Timişoara, Romania -> Arad, Romania -> Oradea, Romania -> Debrecen, Hungary -> Nyíregyháza, Hungary -> Uzhgorod, Ukraine -> Rzeszów, Poland -> Lublin, Poland -> Białystok, Poland -> Tallinn, Estonia -> Helsinki, Finland -> Oulu, Finland]

$ java RunPathFinder dijkstra NPuzzle 3 "/HFG/BED/C_A/" "/ABC/DEF/GH_/"
visited nodes: [181440]
minimal cost:  [31.0]
shortest path: [/HFG/BED/C_A/ -> /HFG/BED/CA_/ -> /HFG/BE_/CAD/ -> /HF_/BEG/CAD/ -> /H_F/BEG/CAD/ -> /_HF/BEG/CAD/ -> /BHF/_EG/CAD/ -> /BHF/CEG/_AD/ -> /BHF/CEG/A_D/ -> /BHF/CEG/AD_/ -> /BHF/CE_/ADG/ -> /BHF/C_E/ADG/ -> /BHF/_CE/ADG/ -> /BHF/ACE/_DG/ -> /BHF/ACE/D_G/ -> /BHF/ACE/DG_/ -> /BHF/AC_/DGE/ -> /BHF/A_C/DGE/ -> /B_F/AHC/DGE/ -> /BF_/AHC/DGE/ -> /BFC/AH_/DGE/ -> /BFC/A_H/DGE/ -> /B_C/AFH/DGE/ -> /_BC/AFH/DGE/ -> /ABC/_FH/DGE/ -> /ABC/DFH/_GE/ -> /ABC/DFH/G_E/ -> /ABC/DFH/GE_/ -> /ABC/DF_/GEH/ -> /ABC/D_F/GEH/ -> /ABC/DEF/G_H/ -> /ABC/DEF/GH_/]

$ java RunPathFinder astar NPuzzle 3 "/HFG/BED/C_A/" "/ABC/DEF/GH_/"
visited nodes: [15860]
minimal cost:  [31.0]
shortest path: [/HFG/BED/C_A/ -> /HFG/BED/_CA/ -> /HFG/_ED/BCA/ -> /HFG/E_D/BCA/ -> /H_G/EFD/BCA/ -> /HG_/EFD/BCA/ -> /HGD/EF_/BCA/ -> /HGD/EFA/BC_/ -> /HGD/EFA/B_C/ -> /HGD/E_A/BFC/ -> /H_D/EGA/BFC/ -> /HD_/EGA/BFC/ -> /HDA/EG_/BFC/ -> /HDA/EGC/BF_/ -> /HDA/EGC/B_F/ -> /HDA/E_C/BGF/ -> /HDA/_EC/BGF/ -> /_DA/HEC/BGF/ -> /D_A/HEC/BGF/ -> /DA_/HEC/BGF/ -> /DAC/HE_/BGF/ -> /DAC/H_E/BGF/ -> /DAC/_HE/BGF/ -> /DAC/BHE/_GF/ -> /DAC/BHE/G_F/ -> /DAC/B_E/GHF/ -> /DAC/_BE/GHF/ -> /_AC/DBE/GHF/ -> /A_C/DBE/GHF/ -> /ABC/D_E/GHF/ -> /ABC/DE_/GHF/ -> /ABC/DEF/GH_/]

$ java RunPathFinder dijkstra NPuzzle 3 "/HGF/BED/C_A/" "/ABC/DEF/GH_/"
visited nodes: [181440]
minimal cost:  [null]
shortest path: [No path found from /HGF/BED/C_A/]

$ java RunPathFinder astar NPuzzle 3 "/HGF/BED/C_A/" "/ABC/DEF/GH_/"
visited nodes: [181440]
minimal cost:  [null]
shortest path: [No path found from /HGF/BED/C_A/]

$ java RunPathFinder dijkstra GridGraph graphs/GridGraph/AR0011SR.map 
"23:161" "130:211"
visited nodes: [20813]
minimal cost:  [366.40411229460744]
shortest path: [23:161 -> 23:160 -> 23:159 -> 23:158 -> 23:157 -> 23:156 -> 23:155 -> 23:154 -> 23:153 -> 23:152 -> 23:151 -> 23:150 -> 23:149 -> 23:148 -> 23:147 -> 23:146 -> 23:145 -> 23:144 -> 23:143 -> 23:142 -> 23:141 -> 23:140 -> 23:139 -> 23:138 -> 23:137 -> 23:136 -> 23:135 -> 23:134 -> 23:133 -> 23:132 -> 23:131 -> 23:130 -> 22:129 -> 22:128 -> 22:127 -> 22:126 -> 22:125 -> 22:124 -> 22:123 -> 22:122 -> 22:121 -> 22:120 -> 22:119 -> 22:118 -> 22:117 -> 22:116 -> 22:115 -> 22:114 -> 22:113 -> 22:112 -> 22:111 -> 22:110 -> 22:109 -> 22:108 -> 21:107 -> 21:106 -> 21:105 -> 21:104 -> 20:103 -> 20:102 -> 20:101 -> 20:100 -> 19:99 -> 19:98 -> 19:97 -> 18:96 -> 17:95 -> 16:94 -> 15:93 -> 14:92 -> 14:91 -> 14:90 -> 14:89 -> 14:88 -> 14:87 -> 14:86 -> 14:85 -> 14:84 -> 14:83 -> 15:82 -> 16:81 -> 17:80 -> 18:79 -> 19:78 -> 20:77 -> 21:76 -> 22:75 -> 23:74 -> 24:73 -> 25:72 -> 26:71 -> 27:70 -> 28:69 -> 29:68 -> 30:67 -> 31:66 -> 32:65 -> 33:64 -> 34:63 -> 35:62 -> 36:61 -> 37:60 -> 38:59 -> 39:59 -> 40:58 -> 41:58 -> 42:58 -> 43:58 -> 44:58 -> 45:59 -> 46:60 -> 47:61 -> 47:62 -> 48:63 -> 48:64 -> 48:65 -> 48:66 -> 48:67 -> 48:68 -> 48:69 -> 48:70 -> 48:71 -> 48:72 -> 48:73 -> 48:74 -> 48:75 -> 48:76 -> 48:77 -> 48:78 -> 48:79 -> 48:80 -> 48:81 -> 48:82 -> 48:83 -> 48:84 -> 48:85 -> 48:86 -> 48:87 -> 48:88 -> 48:89 -> 48:90 -> 48:91 -> 48:92 -> 48:93 -> 48:94 -> 48:95 -> 48:96 -> 48:97 -> 48:98 -> 48:99 -> 48:100 -> 48:101 -> 48:102 -> 48:103 -> 48:104 -> 48:105 -> 49:106 -> 50:107 -> 51:108 -> 52:109 -> 53:110 -> 54:111 -> 55:112 -> 56:113 -> 57:114 -> 58:115 -> 59:116 -> 60:116 -> 61:116 -> 62:116 -> 63:117 -> 64:118 -> 65:119 -> 66:120 -> 67:121 -> 68:122 -> 69:123 -> 70:124 -> 71:125 -> 72:126 -> 73:127 -> 74:128 -> 75:129 -> 76:130 -> 77:131 -> 78:132 -> 79:133 -> 80:134 -> 81:135 -> 82:136 -> 83:137 -> 84:138 -> 85:139 -> 86:140 -> 87:141 -> 88:142 -> 89:143 -> 90:144 -> 91:145 -> 92:146 -> 93:147 -> 94:148 -> 95:149 -> 96:150 -> 97:151 -> 98:152 -> 99:153 -> 100:154 -> 101:155 -> 102:156 -> 103:157 -> 104:157 -> 105:157 -> 106:157 -> 107:157 -> 108:157 -> 109:157 -> 110:157 -> 111:157 -> 112:157 -> 113:157 -> 114:157 -> 115:157 -> 116:157 -> 117:157 -> 118:158 -> 119:159 -> 120:160 -> 121:161 -> 122:162 -> 123:162 -> 124:162 -> 125:163 -> 126:164 -> 127:165 -> 128:165 -> 129:166 -> 130:167 -> 131:168 -> 132:169 -> 133:170 -> 134:171 -> 135:172 -> 136:172 -> 137:172 -> 138:172 -> 139:172 -> 140:172 -> 141:172 -> 142:172 -> 143:172 -> 144:172 -> 145:172 -> 146:172 -> 147:172 -> 148:172 -> 149:172 -> 150:172 -> 151:172 -> 152:172 -> 153:172 -> 154:172 -> 155:172 -> 156:172 -> 157:172 -> 158:171 -> 159:170 -> 160:170 -> 161:171 -> 162:172 -> 162:173 -> 162:174 -> 162:175 -> 161:176 -> 160:177 -> 159:178 -> 158:179 -> 157:180 -> 156:181 -> 155:182 -> 154:183 -> 153:184 -> 152:185 -> 151:186 -> 150:187 -> 149:188 -> 148:189 -> 147:190 -> 146:191 -> 145:192 -> 145:193 -> 145:194 -> 145:195 -> 145:196 -> 144:197 -> 143:198 -> 142:199 -> 141:200 -> 140:201 -> 139:202 -> 138:203 -> 137:204 -> 136:205 -> 135:206 -> 134:207 -> 133:208 -> 132:209 -> 131:210 -> 130:211]

$ java RunPathFinder astar GridGraph graphs/GridGraph/AR0011SR.map 
"23:161" "130:211"
visited nodes: [12761]
minimal cost:  [366.40411229460744]
shortest path: [23:161 -> 23:160 -> 23:159 -> 23:158 -> 23:157 -> 23:156 -> 23:155 -> 23:154 -> 23:153 -> 23:152 -> 23:151 -> 23:150 -> 23:149 -> 23:148 -> 23:147 -> 23:146 -> 23:145 -> 23:144 -> 23:143 -> 23:142 -> 23:141 -> 23:140 -> 23:139 -> 23:138 -> 23:137 -> 23:136 -> 23:135 -> 23:134 -> 23:133 -> 23:132 -> 23:131 -> 23:130 -> 22:129 -> 22:128 -> 22:127 -> 22:126 -> 22:125 -> 22:124 -> 22:123 -> 22:122 -> 22:121 -> 22:120 -> 22:119 -> 22:118 -> 22:117 -> 22:116 -> 22:115 -> 22:114 -> 22:113 -> 22:112 -> 22:111 -> 22:110 -> 22:109 -> 22:108 -> 21:107 -> 21:106 -> 21:105 -> 21:104 -> 20:103 -> 20:102 -> 20:101 -> 20:100 -> 19:99 -> 19:98 -> 19:97 -> 18:96 -> 17:95 -> 16:94 -> 15:93 -> 14:92 -> 14:91 -> 14:90 -> 14:89 -> 15:88 -> 16:87 -> 17:86 -> 18:85 -> 19:84 -> 20:83 -> 21:82 -> 22:81 -> 23:80 -> 24:79 -> 25:78 -> 26:77 -> 27:76 -> 28:75 -> 29:74 -> 30:73 -> 30:72 -> 31:71 -> 32:70 -> 32:69 -> 33:68 -> 34:67 -> 34:66 -> 35:65 -> 36:64 -> 36:63 -> 36:62 -> 36:61 -> 37:60 -> 38:59 -> 39:59 -> 40:58 -> 41:58 -> 42:58 -> 43:58 -> 44:58 -> 45:59 -> 46:60 -> 47:61 -> 48:62 -> 49:63 -> 50:64 -> 51:65 -> 52:66 -> 53:67 -> 54:68 -> 55:69 -> 55:70 -> 55:71 -> 55:72 -> 55:73 -> 55:74 -> 55:75 -> 55:76 -> 55:77 -> 55:78 -> 55:79 -> 55:80 -> 55:81 -> 55:82 -> 55:83 -> 55:84 -> 55:85 -> 55:86 -> 55:87 -> 55:88 -> 55:89 -> 55:90 -> 55:91 -> 55:92 -> 55:93 -> 55:94 -> 55:95 -> 55:96 -> 55:97 -> 55:98 -> 55:99 -> 55:100 -> 55:101 -> 55:102 -> 55:103 -> 55:104 -> 55:105 -> 55:106 -> 55:107 -> 55:108 -> 55:109 -> 55:110 -> 55:111 -> 55:112 -> 56:113 -> 57:114 -> 58:115 -> 59:116 -> 60:117 -> 61:118 -> 62:119 -> 63:120 -> 64:121 -> 65:122 -> 66:123 -> 67:124 -> 68:125 -> 69:126 -> 70:127 -> 71:128 -> 72:129 -> 73:130 -> 74:131 -> 75:132 -> 76:133 -> 77:134 -> 78:135 -> 79:136 -> 80:137 -> 81:138 -> 82:139 -> 83:140 -> 84:141 -> 85:142 -> 86:143 -> 87:144 -> 88:145 -> 89:146 -> 90:147 -> 91:148 -> 92:149 -> 93:150 -> 94:151 -> 95:152 -> 96:153 -> 97:154 -> 98:155 -> 99:156 -> 100:157 -> 101:158 -> 102:159 -> 103:160 -> 104:161 -> 105:162 -> 106:163 -> 107:164 -> 108:165 -> 109:166 -> 110:167 -> 111:168 -> 112:169 -> 113:170 -> 114:171 -> 115:172 -> 116:172 -> 117:172 -> 118:172 -> 119:172 -> 120:172 -> 121:172 -> 122:172 -> 123:172 -> 124:172 -> 125:172 -> 126:172 -> 127:172 -> 128:172 -> 129:172 -> 130:172 -> 131:172 -> 132:172 -> 133:172 -> 134:172 -> 135:172 -> 136:172 -> 137:172 -> 138:172 -> 139:172 -> 140:172 -> 141:172 -> 142:172 -> 143:172 -> 144:172 -> 145:172 -> 146:172 -> 147:172 -> 148:172 -> 149:172 -> 150:172 -> 151:172 -> 152:172 -> 153:172 -> 154:172 -> 155:172 -> 156:172 -> 157:172 -> 158:171 -> 159:170 -> 160:170 -> 161:171 -> 162:172 -> 162:173 -> 162:174 -> 161:175 -> 160:176 -> 159:177 -> 158:178 -> 157:179 -> 156:180 -> 155:181 -> 154:182 -> 153:183 -> 152:184 -> 151:185 -> 150:186 -> 149:187 -> 148:188 -> 147:189 -> 146:190 -> 145:191 -> 144:192 -> 143:193 -> 142:194 -> 141:195 -> 140:196 -> 139:197 -> 139:198 -> 139:199 -> 139:200 -> 138:201 -> 137:202 -> 136:203 -> 135:204 -> 134:205 -> 133:206 -> 132:207 -> 131:208 -> 131:209 -> 131:210 -> 130:211]

$ java RunPathFinder dijkstra WordLadder graphs/WordLadder/words-saldo.txt 
syster broder
visited nodes: [13626]
minimal cost:  [11.0]
shortest path: [syster -> byster -> bysten -> basten -> basken -> banken -> banden -> bauden -> bruden -> bröden -> bröder -> broder]

$ java RunPathFinder astar WordLadder graphs/WordLadder/words-saldo.txt 
syster broder
visited nodes: [1961]
minimal cost:  [11.0]
shortest path: [syster -> sylter -> salter -> balter -> balder -> barder -> barden -> bauden -> bruden -> bräden -> bräder -> broder]

/*************************************************************************
*****
*  For which of the three classes GridGraph, WordLadder and NPuzzle,
*  did the heuristics .guessCost() have the most impact?
*
*  Why do you think this is the case?
*************************************************************************
****/
[...]
/*************************************************************************
*****
*  Show pseudo-code of the following methods that you implemented
*************************************************************************
****/
// WordLadder.outgoingEdges(String word)
[...]
// WordLadder.guessCost(String v, String w)
[...]
// GridGraph.guessCost(Coord start, Coord end)
[...]
/*************************************************************************
*****
*  Show pseudo-code of method .searchDijkstra() in PathFinder
*************************************************************************
****/
// PathFinder.searchDijkstra(V start, V goal)
[...]
/*************************************************************************
*****
*  What are the main differences between your implementations
*  of .searchAstar() and .searchDijkstra()?
*************************************************************************
****/
[...]
/*************************************************************************
*****
*  Are there any known bugs / limitations?
*************************************************************************
****/
/*************************************************************************
*****
*  Did you collaborate with any other students on this lab?
*  If so, please write in what way you collaborated and with whom.
*  Also include any resources (including the web) that you may
*  may have used in creating your design.
*************************************************************************
****/
/*************************************************************************
*****
*  Describe any serious problems you encountered.
*************************************************************************
****/
/*************************************************************************
*****
*  List any other comments here. Feel free to provide any feedback
*  on how much you learned from doing the assignment, and whether
*  you enjoyed doing it.
*************************************************************************
****/

